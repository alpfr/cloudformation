AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to forward CloudWatch Logs from S3 to Splunk in AWS GovCloud using Python 3"

Parameters:
  SplunkUrl:
    Description: "The full Splunk HEC URL (e.g., https://splunk.example.com:8088/services/collector)"
    Type: String
    Default: "https://splunk.example.com:8088/services/collector"

  SplunkHECToken:
    Description: "Splunk HTTP Event Collector (HEC) Token"
    Type: String
    NoEcho: true

  SplunkIndex:
    Description: "The Splunk Index where logs should be forwarded"
    Type: String
    Default: "main"

  SplunkSource:
    Description: "The source identifier for Splunk"
    Type: String
    Default: "s3-logs"

  S3BucketName:
    Description: "The name of the S3 bucket where CloudWatch logs are stored"
    Type: String

Resources:
  # Lambda IAM Role with permissions to read from S3 and push logs to Splunk
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: "lambda.amazonaws.com"
          Action: "sts:AssumeRole"
          Condition:
            StringEquals:
              aws:RequestedRegion: "us-gov-west-1"
      Policies:
      - PolicyName: "S3AccessPolicy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"

  # Lambda Function to read logs from S3 and forward to Splunk
  SplunkLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import gzip
          import boto3
          import logging
          import os
          import base64
          import requests

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              splunk_url = os.environ['SPLUNK_URL']
              splunk_token = os.environ['SPLUNK_HEC_TOKEN']
              splunk_index = os.environ['SPLUNK_INDEX']
              splunk_source = os.environ['SPLUNK_SOURCE']

              # Iterate through S3 event records
              for record in event['Records']:
                  s3_bucket = record['s3']['bucket']['name']
                  s3_key = record['s3']['object']['key']

                  # Fetch the log file from S3
                  s3_object = s3.get_object(Bucket=s3_bucket, Key=s3_key)
                  compressed_data = s3_object['Body'].read()

                  # Decompress the data
                  uncompressed_data = gzip.decompress(compressed_data)
                  log_data = json.loads(uncompressed_data)

                  # Prepare the Splunk events
                  splunk_events = []
                  for log_event in log_data['logEvents']:
                      splunk_event = {
                          'time': log_event['timestamp'] / 1000,
                          'host': log_data['logGroup'],
                          'source': splunk_source,
                          'sourcetype': '_json',
                          'index': splunk_index,
                          'event': log_event['message']
                      }
                      splunk_events.append(splunk_event)

                  # Send the logs to Splunk HEC
                  headers = {
                      'Authorization': f'Splunk {splunk_token}',
                      'Content-Type': 'application/json'
                  }

                  try:
                      response = requests.post(splunk_url, headers=headers, data=json.dumps({"event": splunk_events}))
                      response.raise_for_status()
                      logger.info(f"Successfully sent logs to Splunk: {response.text}")
                  except requests.exceptions.RequestException as e:
                      logger.error(f"Error sending logs to Splunk: {e}")
                      raise

      Runtime: "python3.9"
      Environment:
        Variables:
          SPLUNK_URL: !Ref SplunkUrl
          SPLUNK_HEC_TOKEN: !Ref SplunkHECToken
          SPLUNK_INDEX: !Ref SplunkIndex
          SPLUNK_SOURCE: !Ref SplunkSource
      MemorySize: 128
      Timeout: 30

  # S3 Bucket Notification (trigger Lambda on object creation)
  S3BucketNotification:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: "s3:ObjectCreated:*"
          Function: !GetAtt SplunkLambdaFunction.Arn

  # Lambda Permission to be triggered by S3
  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref SplunkLambdaFunction
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${S3BucketName}"
