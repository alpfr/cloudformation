AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create a Network Load Balancer with CloudWatch Logs

Parameters:
  SplunkUrl:
    Description: The full Splunk HEC URL (e.g., https://splunk.example.com:8088/services/collector)
    Type: String
    Default: 'https://162.138.206.49:8088/services/collector'
  SplunkHECToken:
    Description: Splunk HTTP Event Collector (HEC) Token
    Type: String
    NoEcho: true
    Default: 67892b54-ba53-4187-9ecb-8bf3dc54a2e9
  SplunkIndex:
    Description: The Splunk Index where logs should be forwarded
    Type: String
    Default: 'splunk_demo'
  SplunkSource:
    Description: The source identifier for Splunk
    Type: String
    Default: '/var/log/audit'
  SplunkSourceType:
    Description: Splunk source type with splunk
    Type: String
    Default: aws:cloudwatch:logs
  SplunkLambdaProject:
    Description: Enter the project for the lambda function.
    Type: String
    Default: projectname
  SplunkLambdaApplicationName:
    Description: Enter the application for the lambda function
    Type: String
    Default: lambda
  SplunkLambdaPurpose:
    Description: Enter the purpose for the lambda function. Used to build the function name
    Type: String
    Default: ec2instancetosplunk
  SplunkAppGroup:
    Description: Enter the purpose for the lambda function. Used to build the function name
    Type: String
    Default: appl
  LogGroup:
    Description: The name of the existing CloudWatch logs
    Type: String
    Default: /linux/var/audit
  LifeCycle:
    Description: The environment (dev, stage, prod)
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - stage
    - uat
    - test
    - prod
  VPCList:
    Description: The list of VPCs to associate with the Lambda function
    Type: 'AWS::EC2::VPC::Id'
  SubnetList:
    Description: The list of subnets in the VPC for the Lambda function
    Type: 'List<AWS::EC2::Subnet::Id>'
  SplunkSecurityGroup:
    Description: Security Group for Splunk HEC Egress
    Type: String
    Default: sg-0d303a0fb5d669527

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: Lambda Configuration
      Parameters:
      - VPCList
      - SubnetList
      - LifeCycle
    - Label:
        default: Splunk Requirements
      Parameters:
      - SplunkUrl
      - SplunkHECToken
      - SplunkIndex
      - SplunkSource
      - SplunkLambdaProject
      - SplunkLambdaApplicationName
      - SplunkLambdaPurpose
      - SplunkAppGroup
      - LogGroup

Resources:
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'oit-gusw1-lambda-ExecutionRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
      - 'arn:aws-us-gov:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      - 'arn:aws-us-gov:iam::aws:policy/AmazonS3ReadOnlyAccess'

  SplunkLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import requests
          from datetime import datetime, timedelta
          import logging

          # Initialize CloudWatch Logs client and logger
          cloudwatch_logs = boto3.client('logs')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          SPLUNK_HEC_URL = os.environ['SPLUNK_HEC_URL']
          SPLUNK_HEC_TOKEN = os.environ['SPLUNK_HEC_TOKEN']
          SPLUNK_INDEX = os.environ['SPLUNK_INDEX']
          SPLUNK_SOURCE = os.environ['SPLUNK_SOURCE']

          LOG_GROUP_NAME = os.environ['LOG_GROUP_NAME']  # Use the LogGroup from env variables
          BATCH_SIZE = 100
          MAX_RETRIES = 3

          def lambda_handler(event, context):
              try:
                  start_time = int((datetime.now() - timedelta(minutes=5)).timestamp() * 1000)
                  end_time = int(datetime.now().timestamp() * 1000)

                  log_streams = cloudwatch_logs.describe_log_streams(
                      logGroupName=LOG_GROUP_NAME,
                      orderBy='LastEventTime',
                      descending=True
                  )['logStreams']

                  for stream in log_streams:
                      stream_name = stream['logStreamName']
                      log_events = cloudwatch_logs.get_log_events(
                          logGroupName=LOG_GROUP_NAME,
                          logStreamName=stream_name,
                          startTime=start_time,
                          endTime=end_time
                      )['events']

                      if not log_events:
                          logger.info(f"No new log events found for stream {stream_name}")
                          continue

                      splunk_events = []
                      for event in log_events:
                          parsed_event = parse_transfer_family_log(event['message'])
                          if parsed_event:
                              splunk_event = {
                                  "time": event['timestamp'] / 1000,
                                  "host": LOG_GROUP_NAME,
                                  "source": SPLUNK_SOURCE,
                                  "sourcetype": "aws:transfer:workflow",
                                  "index": SPLUNK_INDEX,
                                  "event": parsed_event
                              }
                              splunk_events.append(splunk_event)

                          if len(splunk_events) >= BATCH_SIZE:
                              send_to_splunk(splunk_events)
                              splunk_events = []

                      if splunk_events:
                          send_to_splunk(splunk_events)

              except Exception as e:
                  logger.error(f"Error processing AWS Transfer Family logs: {e}")

          def parse_transfer_family_log(log_message):
              try:
                  log_data = json.loads(log_message)
                  parsed_event = {
                      "type": log_data.get("type"),
                      "workflowId": log_data.get("workflowId"),
                      "executionId": log_data.get("executionId"),
                      "stepType": log_data.get("details", {}).get("stepType"),
                      "stepName": log_data.get("details", {}).get("stepName"),
                      "serverId": log_data.get("transferDetails", {}).get("serverId"),
                      "username": log_data.get("transferDetails", {}).get("username"),
                      "sessionId": log_data.get("transferDetails", {}).get("sessionId")
                  }
                  output = log_data.get("details", {}).get("output")
                  if output:
                      parsed_event["output"] = json.dumps(output)
                  return parsed_event
              except json.JSONDecodeError:
                  logger.error(f"Failed to parse log message: {log_message}")
                  return None

          def send_to_splunk(events):
              headers = {
                  "Authorization": f"Splunk {SPLUNK_HEC_TOKEN}",
                  "Content-Type": "application/json"
              }
              payload = json.dumps(events)

              for attempt in range(MAX_RETRIES):
                  try:
                      response = requests.post(SPLUNK_HEC_URL, headers=headers, data=payload, verify=False)
                      if response.status_code == 200:
                          logger.info(f"Successfully sent {len(events)} events to Splunk")
                          return
                      else:
                          logger.error(f"Failed to send data to Splunk. Status code: {response.status_code}")
                  except requests.exceptions.RequestException as e:
                      logger.error(f"Error sending data to Splunk (attempt {attempt + 1}): {e}")
                  if attempt < MAX_RETRIES - 1:
                      time.sleep(2)

      Runtime: python3.8
      Timeout: 30
      VpcConfig:
        SubnetIds: !Ref SubnetList
        SecurityGroupIds:
        - !Ref SplunkSecurityGroup

  SplunkEgressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCList
      GroupDescription: Allow CloudWatch Log forward lambda to Splunk HEC
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 8088
        ToPort: 8088
        CidrIp: 162.138.206.49/23

  LambdaSubscription:
    Type: 'AWS::Logs::SubscriptionFilter'
    DependsOn: LambdaInvokePermission
    Properties:
      DestinationArn: !Sub '${SplunkLambdaFunction.Arn}'
      FilterPattern: ''
      LogGroupName: !Ref LogGroup

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref SplunkLambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: logs.amazonaws.com
      SourceArn: !Sub 'arn:aws-us-gov:logs:us-gov-west-1:075085867188:log-group:${LogGroup}:*'
