AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create a Network Load Balancer for SSH traffic (port 22)

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "Network Configuration"
      Parameters:
      - VPCId
      - SubnetIds
      - LoadBalancerSecurityGroupId
      - TargetSecurityGroupId
    - Label:
        default: "Load Balancer Configuration"
      Parameters:
      - LoadBalancerName
      - LoadBalancerPort
      - LoadBalancerProtocol
    - Label:
        default: "Target Group Configuration"
      Parameters:
      - TargetGroupName
      - TargetPort
      - TargetGroupProtocol
      - HealthCheckProtocol
      - HealthCheckPort
    - Label:
        default: "Target Configuration"
      Parameters:
      - PrivateIP1
      - PrivateIP2
    - Label:
        default: "Logging Configuration"
      Parameters:
      - AccessLogsEnabled
      - AccessLogsBucketName
    - Label:
        default: "Tagging Configuration"
      Parameters:
      - Environment
      - Project
      - Owner

Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the load balancer and target group will be created
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of public subnet IDs for the load balancer
  LoadBalancerSecurityGroupId:
    Type: String
    Description: ID of the security group for the load balancer (optional)
    Default: ''
  TargetSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: ID of an existing security group to use for the targets
  LoadBalancerName:
    Type: String
    Default: my-ssh-network-load-balancer
    Description: Name of the Network Load Balancer
  TargetGroupName:
    Type: String
    Default: my-ssh-target-group
    Description: Name of the Target Group
  LoadBalancerPort:
    Type: Number
    Default: 22
    Description: Port on which the load balancer listens (SSH)
  TargetPort:
    Type: Number
    Default: 22
    Description: Port on which targets are listening (SSH)
  LoadBalancerProtocol:
    Type: String
    Default: TCP
    AllowedValues:
    - TCP
    Description: Protocol for the load balancer listener (TCP for SSH)
  TargetGroupProtocol:
    Type: String
    Default: TCP
    AllowedValues:
    - TCP
    Description: Protocol for the target group (TCP for SSH)
  HealthCheckProtocol:
    Type: String
    Default: TCP
    AllowedValues:
    - TCP
    Description: Protocol for health checks
  HealthCheckPort:
    Type: Number
    Default: 22
    Description: Port for health checks (SSH port)
  PrivateIP1:
    Type: String
    Description: Private IP address of the first target
  PrivateIP2:
    Type: String
    Description: Private IP address of the second target
  AccessLogsEnabled:
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
    Description: Enable or disable access logs for the Network Load Balancer
  AccessLogsBucketName:
    Type: String
    Description: Name of the S3 bucket to store access logs (must be in the same region as the load balancer)
  Environment:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - test
    - staging
    - prod
    Description: Environment for the resources
  Project:
    Type: String
    Description: Project name for the resources
  Owner:
    Type: String
    Description: Owner of the resources (e.g., team or individual name)

Conditions:
  UseLoadBalancerSecurityGroup: !Not [!Equals [!Ref LoadBalancerSecurityGroupId, '']]

Resources:
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref LoadBalancerName
      Subnets: !Ref SubnetIds
      Type: network
      Scheme: internet-facing
      SecurityGroups: !If
      - UseLoadBalancerSecurityGroup
      - [!Ref LoadBalancerSecurityGroupId]
      - !Ref AWS::NoValue
      LoadBalancerAttributes:
      - Key: deletion_protection.enabled
        Value: true
      - Key: load_balancing.cross_zone.enabled
        Value: true
      - Key: access_logs.s3.enabled
        Value: !Ref AccessLogsEnabled
      - Key: access_logs.s3.bucket
        Value: !Ref AccessLogsBucketName
      - Key: access_logs.s3.prefix
        Value: !Sub "nlb-logs/${LoadBalancerName}"
      Tags:
      - Key: Name
        Value: !Ref LoadBalancerName
      - Key: Environment
        Value: !Ref Environment
      - Key: Project
        Value: !Ref Project
      - Key: Owner
        Value: !Ref Owner
      - Key: ManagedBy
        Value: CloudFormation

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref TargetGroupName
      VpcId: !Ref VPCId
      Protocol: !Ref TargetGroupProtocol
      Port: !Ref TargetPort
      TargetType: ip
      HealthCheckProtocol: !Ref HealthCheckProtocol
      HealthCheckPort: !Ref HealthCheckPort
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Targets:
      - Id: !Ref PrivateIP1
        Port: !Ref TargetPort
      - Id: !Ref PrivateIP2
        Port: !Ref TargetPort
      Tags:
      - Key: Name
        Value: !Ref TargetGroupName
      - Key: Environment
        Value: !Ref Environment
      - Key: Project
        Value: !Ref Project
      - Key: Owner
        Value: !Ref Owner
      - Key: ManagedBy
        Value: CloudFormation

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Protocol: !Ref LoadBalancerProtocol
      Port: !Ref LoadBalancerPort
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      Tags:
      - Key: Name
        Value: !Sub ${LoadBalancerName}-listener
      - Key: Environment
        Value: !Ref Environment
      - Key: Project
        Value: !Ref Project
      - Key: Owner
        Value: !Ref Owner
      - Key: ManagedBy
        Value: CloudFormation

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref AccessLogsBucketName
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
        - Id: AutoDeleteOldLogs
          Status: Enabled
          ExpirationInDays: 90

  AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: AllowELBLogDelivery
          Effect: Allow
          Principal:
            Service: delivery.logs.amazonaws.com
          Action: s3:PutObject
          Resource: !Sub ${AccessLogsBucket.Arn}/*
          Condition:
            StringEquals:
              s3:x-amz-acl: bucket-owner-full-control

Outputs:
  LoadBalancerDNSName:
    Description: DNS name of the Network Load Balancer
    Value: !GetAtt NetworkLoadBalancer.DNSName
  LoadBalancerArn:
    Description: ARN of the Network Load Balancer
    Value: !Ref NetworkLoadBalancer
  TargetGroupArn:
    Description: ARN of the Target Group
    Value: !Ref TargetGroup
  TargetSecurityGroupId:
    Description: ID of the Security Group for targets
    Value: !Ref TargetSecurityGroupId
  AccessLogsBucketName:
    Description: Name of the S3 bucket storing access logs
    Value: !Ref AccessLogsBucket
