AWSTemplateFormatVersion: '2010-09-09'
Description: Improved template for creating an AWS Transfer for SFTP service with enhanced security and best practices.

Parameters:
  CreateServer:
    AllowedValues:
    - 'true'
    - 'false'
    Type: String
    Description: If true, a server is created and the customer identity provider is automatically associated with it.
    Default: 'true'
  SecretsManagerRegion:
    Type: String
    Description: (Optional) The region where the secrets are stored.
    Default: ''
  DMZSubnetA:
    Description: The ID of the first public subnet where the transfer servers will be deployed in the Production VPC.
    Type: AWS::EC2::Subnet::Id
  DMZSubnetB:
    Description: The ID of the second public subnet where the transfer servers will be deployed in the Production VPC.
    Type: AWS::EC2::Subnet::Id
  VPCProduction:
    Description: ID of the Production VPC where the SFTP Server will be deployed.
    Type: AWS::EC2::VPC::Id
  AllowedCIDR:
    Description: The CIDR block allowed to access the SFTP server (e.g., your company's IP range).
    Type: String
    Default: 0.0.0.0/0
  KMSKeyArn:
    Description: ARN of the KMS key for encryption (optional).
    Type: String
    Default: ''

Conditions:
  CreateServer:
    Fn::Equals:
    - Ref: CreateServer
    - 'true'
  NotCreateServer:
    Fn::Not:
    - Condition: CreateServer
  SecretsManagerRegionProvided:
    Fn::Not:
    - Fn::Equals:
      - Ref: SecretsManagerRegion
      - ''
  UseKMS:
    Fn::Not:
    - Fn::Equals:
      - Ref: KMSKeyArn
      - ''

Resources:
  EIPTran01:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: SFTP-EIP-01
      - Key: Purpose
        Value: SFTP-HA

  EIPTran02:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: SFTP-EIP-02
      - Key: Purpose
        Value: SFTP-HA

  TransferServer:
    Type: AWS::Transfer::Server
    Condition: CreateServer
    Properties:
      EndpointDetails:
        AddressAllocationIds:
        - !GetAtt EIPTran01.AllocationId
        - !GetAtt EIPTran02.AllocationId
        SubnetIds:
        - !Ref DMZSubnetA
        - !Ref DMZSubnetB
        VpcId: !Ref VPCProduction
      EndpointType: VPC
      IdentityProviderDetails:
        InvocationRole: !GetAtt TransferIdentityProviderRole.Arn
        Url:
          Fn::Sub: https://${CustomIdentityProviderApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}
      IdentityProviderType: API_GATEWAY
      LoggingRole: !GetAtt CloudWatchLoggingRole.Arn
      Protocols:
      - SFTP
      SecurityPolicyName: TransferSecurityPolicy-2020-06
      Tags:
      - Key: Name
        Value: SFTPServer
      - Key: Environment
        Value: Production

  CloudWatchLoggingRole:
    Type: AWS::IAM::Role
    Condition: CreateServer
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - transfer.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: TransferLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/transfer/*
      Tags:
      - Key: Purpose
        Value: SFTP-Logging

  CustomIdentityProviderApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Transfer Custom Identity Provider API
      Description: API used for GetUserConfig requests
      EndpointConfiguration:
        Types:
        - REGIONAL
      Tags:
      - Key: Purpose
        Value: SFTP-Authentication

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws-us-gov:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: LambdaSecretsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource:
              Fn::Sub:
              - arn:${AWS::Partition}:secretsmanager:${SecretsRegion}:${AWS::AccountId}:secret:dev/lssp/sftp-*
              - SecretsRegion:
                  Fn::If:
                  - SecretsManagerRegionProvided
                  - Ref: SecretsManagerRegion
                  - Ref: AWS::Region
      - PolicyName: LambdaKMSPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - kms:Decrypt
            Resource:
              Fn::If:
              - UseKMS
              - Ref: KMSKeyArn
              - !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
      Tags:
      - Key: Purpose
        Value: SFTP-Lambda-Execution

  ApiCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
            Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
      Tags:
      - Key: Purpose
        Value: SFTP-API-Logging

  ApiLoggingAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiCloudWatchLogsRole.Arn

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref CustomIdentityProviderApi
      StageName: prod
      MethodSettings:
      - DataTraceEnabled: false
        HttpMethod: "*"
        LoggingLevel: INFO
        ResourcePath: "/*"
      Tags:
      - Key: Purpose
        Value: SFTP-API-Stage

  ApiDeployment:
    DependsOn:
    - GetUserConfigRequest
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref CustomIdentityProviderApi
      StageName: dummystagefordeployment

  TransferIdentityProviderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: transfer.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: TransferCanInvokeThisApi
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - execute-api:Invoke
            Resource: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${CustomIdentityProviderApi}/prod/GET/*
      Tags:
      - Key: Purpose
        Value: SFTP-Identity-Provider

  GetUserConfigLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import os
          import json
          import boto3
          import base64
          from botocore.exceptions import ClientError

          def lambda_handler(event, context):
              resp_data = {}
              print(event)

              if 'username' not in event or 'serverId' not in event:
                  print("Incoming username or serverId missing - Unexpected")
                  return resp_data

              input_username = event['username']
              print(f"Username: {input_username}, ServerId: {event['serverId']}")

              if 'password' in event:
                  input_password = event['password']
              else:
                  print("No password, checking for SSH public key")
                  input_password = ''

              resp = get_secret(f"SFTP/{input_username}")

              if resp is None:
                  print("Secrets Manager exception thrown")
                  return {}

              resp_dict = json.loads(resp)

              if input_password:
                  if 'Password' not in resp_dict or resp_dict['Password'] != input_password:
                      print("Unable to authenticate user - Invalid password")
                      return {}
              elif 'PublicKey' in resp_dict:
                  resp_data['PublicKeys'] = [resp_dict['PublicKey']]
              else:
                  print("Unable to authenticate user - No public keys found")
                  return {}

              resp_data['Role'] = resp_dict.get('Role', '')

              if 'Policy' in resp_dict:
                  resp_data['Policy'] = resp_dict['Policy']

              if 'HomeDirectoryDetails' in resp_dict:
                  print("HomeDirectoryDetails found - Applying setting for virtual folders")
                  resp_data['HomeDirectoryDetails'] = resp_dict['HomeDirectoryDetails']
                  resp_data['HomeDirectoryType'] = "LOGICAL"
              elif 'HomeDirectory' in resp_dict:
                  print("HomeDirectory found - Cannot be used with HomeDirectoryDetails")
                  resp_data['HomeDirectory'] = resp_dict['HomeDirectory']
              else:
                  print("HomeDirectory not found - Defaulting to /")

              print(f"Completed Response Data: {json.dumps(resp_data)}")
              return resp_data

          def get_secret(secret_id):
              region = os.environ['SecretsManagerRegion']
              print(f"Secrets Manager Region: {region}")

              client = boto3.session.Session().client(service_name='secretsmanager', region_name=region)

              try:
                  resp = client.get_secret_value(SecretId=secret_id)
                  if 'SecretString' in resp:
                      print("Found Secret String")
                      return resp['SecretString']
                  else:
                      print("Found Binary Secret")
                      return base64.b64decode(resp['SecretBinary'])
              except ClientError as err:
                  print(f'Error Talking to SecretsManager: {err.response["Error"]["Code"]}, Message: {str(err)}')
                  return None

      Description: A function to lookup and return user data from AWS Secrets Manager.
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Environment:
        Variables:
          SecretsManagerRegion: !If [SecretsManagerRegionProvided, !Ref SecretsManagerRegion, !Ref "AWS::Region"]
      Tags:
      - Key: Purpose
        Value: SFTP-User-Authentication

  GetUserConfigLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GetUserConfigLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${CustomIdentityProviderApi}/*

  ServersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref CustomIdentityProviderApi
      ParentId: !GetAtt CustomIdentityProviderApi.RootResourceId
      PathPart: servers

  ServerIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref CustomIdentityProviderApi
      ParentId: !Ref ServersResource
      PathPart: "{serverId}"

  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref CustomIdentityProviderApi
      ParentId: !Ref ServerIdResource
      PathPart: users

  UserNameResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref CustomIdentityProviderApi
      ParentId: !Ref UsersResource
      PathPart: "{username}"

  GetUserConfigResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref CustomIdentityProviderApi
      ParentId: !Ref UserNameResource
      PathPart: config

  GetUserConfigRequest:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserConfigLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          application/json: |
            {
              "username": "$input.params('username')",
              "password": "$util.escapeJavaScript($input.params('Password')).replaceAll("\\'","'")",
              "serverId": "$input.params('serverId')"
            }
      RequestParameters:
        method.request.header.Password: false
      ResourceId: !Ref GetUserConfigResource
      RestApiId:
